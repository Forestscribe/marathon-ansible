- name: Deploy ci backends
  marathon:
    marathon_uri: "{{ marathon_uri }}"
    group_id: ci/backend
    group_json:
        dependencies:
            - /core/lb
            - /core/logging
        apps:
        -   id: crossbar
            cpus: 1
            mem: 1024
            disk: 0
            instances: 1
            container:
              type: DOCKER
              volumes: []
              docker:
                image: crossbario/crossbar
                network: BRIDGE
                privileged: false
                forcePullImage: false
                portMappings:
                - containerPort: 8080
                  protocol: tcp
                  servicePort: "{{ servicePorts.crossbar }}"
                parameters: "{{ docker_log_driver_parameters }}"
            healthChecks:
            - "{{ basic_http_health_check }}"
            labels:
              HAPROXY_GROUP: external
              HAPROXY_BIND_ADDR: 172.17.0.1
        -   id: "pg"
            cmd:
            cpus: 8
            mem: 8000
            disk: 0
            instances: 1
            container:
              type: DOCKER
              volumes:
              - containerPath: "pgdata"
                mode: "RW"
                persistent:
                 type: "root"
                 size: 10000
              docker:
                image: postgres:9.4
                network: BRIDGE
                privileged: false
                parameters: "{{ docker_log_driver_parameters }}"
                forcePullImage: false
                portMappings:
                - containerPort: 5432
                  protocol: tcp
                  servicePort: "{{ servicePorts['postgres'] }}"
            residency:
                taskLostBehavior: "WAIT_FOREVER"
            upgradeStrategy:
                minimumHealthCapacity: 0.5
                maximumOverCapacity: 0
            labels:
              HAPROXY_GROUP: external
              HAPROXY_BIND_ADDR: 172.17.0.1
            env:
                POSTGRES_PASSWORD: "{{POSTGRES_PASSWORD}}"
                POSTGRES_USER: "{{POSTGRES_USER}}"
                POSTGRES_DB: "{{POSTGRES_DB}}"
                PGDATA: "/mnt/mesos/sandbox/pgdata"
            healthChecks:
            - "{{ basic_tcp_health_check }}"

        -   id: "neo4j"
            cmd:
            cpus: 8
            mem: 8000
            disk: 0
            instances: 1
            container:
              type: DOCKER
              volumes:
              - containerPath: "neo4jdata"
                mode: "RW"
                persistent:
                 type: "root"
                 size: 1000
              - containerPath: "/data"
                hostPath: "neo4jdata"
                mode: "RW"
              docker:
                image: neo4j
                network: BRIDGE
                privileged: false
                parameters: "{{ docker_log_driver_parameters }}"
                forcePullImage: false
                portMappings:
                - containerPort: 7474
                  protocol: tcp
                  servicePort: "{{ servicePorts.neo4j }}"
                - containerPort: 7687
                  hostPort: 7687 # Freeze port for redirection
                  protocol: tcp
                  servicePort: "{{ servicePorts.neo4jbolt }}"
            residency:
                taskLostBehavior: "WAIT_FOREVER"
            upgradeStrategy:
                minimumHealthCapacity: 0.5
                maximumOverCapacity: 0
            labels:
              HAPROXY_GROUP: external
              HAPROXY_BIND_ADDR: 172.17.0.1
              subdomain: 'neo3j'
              traefik.enable: "true"
              traefik.frontend.rule: "Host:neo4j.{{ sub_domain }},neo3j.{{ sub_domain }}"
              traefik.frontend.entryPoints: "http,https,wss"
            env:
                NEO4J_AUTH: none
            healthChecks:
            - "{{ basic_tcp_health_check }}"

        -   id: "redis"
            cmd:
            cpus: 2
            mem: 1000
            disk: 0
            instances: 1
            container:
              type: DOCKER
              volumes: []
              docker:
                image: redis:alpine
                network: BRIDGE
                privileged: false
                parameters: "{{ docker_log_driver_parameters }}"
                forcePullImage: false
                portMappings:
                - containerPort: 6379
                  protocol: tcp
                  servicePort: "{{ servicePorts.redis }}"
            labels:
              HAPROXY_GROUP: external
              HAPROXY_BIND_ADDR: 172.17.0.1
            healthChecks:
            - "{{ basic_tcp_health_check }}"
